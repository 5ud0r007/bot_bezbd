from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
import re
from openai import OpenAI
from config import BOT_TOKEN, ADMIN_USER_ID, DB_NAME, OPENAI_API_KEY, OPENAI_PROMPT

client = OpenAI(api_key=OPENAI_API_KEY, base_url="https://api.aitunnel.ru/v1/")

def get_chatgpt_response(prompt):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": OPENAI_PROMPT},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT: {e}")
        return None

def should_create_ticket(response):
    return "–≤—ã–∑—ã–≤–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞" in response.lower()

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tickets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            message TEXT NOT NULL,
            status TEXT DEFAULT 'open',
            updated BOOLEAN DEFAULT FALSE
        )
    ''')
    cursor.execute("PRAGMA table_info(tickets)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'updated' not in columns:
        cursor.execute('ALTER TABLE tickets ADD COLUMN updated BOOLEAN DEFAULT FALSE')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ticket_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ticket_id INTEGER NOT NULL,
            sender_id INTEGER NOT NULL,
            message TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (ticket_id) REFERENCES tickets (id)
        )
    ''')
    conn.commit()
    conn.close()

def add_ticket(user_id: int, username: str, message: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO tickets (user_id, username, message) VALUES (?, ?, ?)', (user_id, username, message))
    ticket_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return ticket_id

def add_ticket_message(ticket_id: int, sender_id: int, message: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO ticket_messages (ticket_id, sender_id, message) VALUES (?, ?, ?)', (ticket_id, sender_id, message))
    if sender_id != ADMIN_USER_ID:
        cursor.execute('UPDATE tickets SET updated = TRUE WHERE id = ?', (ticket_id,))
    conn.commit()
    conn.close()

def get_active_tickets():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT id, user_id, username, message, updated FROM tickets WHERE status = "open"')
    tickets = cursor.fetchall()
    conn.close()
    return tickets

def get_updated_tickets_count():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM tickets WHERE status = "open" AND updated = TRUE')
    count = cursor.fetchone()[0]
    conn.close()
    return count

def get_ticket_messages(ticket_id: int):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT sender_id, message, timestamp FROM ticket_messages WHERE ticket_id = ? ORDER BY timestamp', (ticket_id,))
    messages = cursor.fetchall()
    conn.close()
    return messages

def close_ticket(ticket_id: int):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('UPDATE tickets SET status = "closed" WHERE id = ?', (ticket_id,))
    conn.commit()
    conn.close()

init_db()

user_keyboard = ReplyKeyboardMarkup([["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç üì©"]], resize_keyboard=True)

def get_admin_keyboard(last_ticket_id=None):
    updated_count = get_updated_tickets_count()
    buttons = []
    if last_ticket_id:
        buttons.append([f"–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç ({last_ticket_id}) üì©"])
    if updated_count > 0:
        buttons.append([f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã üìã (+{updated_count})"])
    else:
        buttons.append(["–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã üìã"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_USER_ID:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëã –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏. üõ†Ô∏è", reply_markup=get_admin_keyboard())
    else:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM tickets WHERE user_id = ? AND status = "open"', (user_id,))
        active_ticket = cursor.fetchone()
        conn.close()
        if active_ticket:
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –£ —Ç–µ–±—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç. –ó–∞–∫—Ä–æ–π –µ–≥–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. üìù", reply_markup=ReplyKeyboardMarkup([["–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç üö™"]], resize_keyboard=True))
        else:
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç. üì©", reply_markup=user_keyboard)

async def create_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_USER_ID:
        await update.message.reply_text("–¢—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã üìã'.")
        return
    username = update.message.from_user.username or update.message.from_user.first_name
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM tickets WHERE user_id = ? AND status = "open"', (user_id,))
    active_ticket = cursor.fetchone()
    conn.close()
    if active_ticket:
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç. –ó–∞–∫—Ä–æ–π –µ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π. üö™")
    else:
        await update.message.reply_text("–û–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å: üìù")
        context.user_data["awaiting_ticket_description"] = True

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message.text
    if user_id != ADMIN_USER_ID:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM tickets WHERE user_id = ? AND status = "open"', (user_id,))
        active_ticket = cursor.fetchone()
        conn.close()

        if active_ticket:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏. üéõÔ∏è", reply_markup=ReplyKeyboardMarkup([["–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç üö™"]], resize_keyboard=True))
            return

        if context.user_data.get("awaiting_ticket_description"):
            username = update.message.from_user.username or update.message.from_user.first_name
            chatgpt_response = get_chatgpt_response(message)
            if chatgpt_response:
                await update.message.reply_text(f"ü§ñ: {chatgpt_response}")
                if should_create_ticket(chatgpt_response):
                    ticket_id = add_ticket(user_id, username, message)
                    add_ticket_message(ticket_id, user_id, message)
                    add_ticket_message(ticket_id, ADMIN_USER_ID, chatgpt_response)
                    await update.message.reply_text("–¢–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. üì©", reply_markup=ReplyKeyboardMarkup([["–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç üö™"]], resize_keyboard=True))
                    await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç (ID {ticket_id}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}", reply_markup=get_admin_keyboard(last_ticket_id=ticket_id))
                else:
                    await update.message.reply_text("–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardMarkup([["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç üì©"]], resize_keyboard=True))
            context.user_data["awaiting_ticket_description"] = False
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏. üéõÔ∏è", reply_markup=user_keyboard)
        return

    if re.match(r"^–ù–∞–∑–∞–¥\s*üîô$", message):
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†", reply_markup=get_admin_keyboard())
        context.user_data.pop("selected_ticket_id", None)
        context.user_data.pop("awaiting_admin_response", None)
        return
    if re.match(r"^–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã\s*üìã", message):
        await show_tickets(update, context)
        return
    if context.user_data.get("awaiting_admin_response"):
        ticket_id = context.user_data["selected_ticket_id"]
        add_ticket_message(ticket_id, ADMIN_USER_ID, message)
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('UPDATE tickets SET updated = FALSE WHERE id = ?', (ticket_id,))
        conn.commit()
        conn.close()
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, username FROM tickets WHERE id = ?', (ticket_id,))
        ticket = cursor.fetchone()
        conn.close()
        if ticket:
            user_id_to_reply = ticket[0]
            username = ticket[1]
            try:
                await context.bot.send_message(chat_id=user_id_to_reply, text=f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–≤–æ–π —Ç–∏–∫–µ—Ç (ID {ticket_id}):\n\n{message}")
                await update.message.reply_text(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}. ‚úÖ", reply_markup=get_admin_keyboard())
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            await update.message.reply_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")
        context.user_data.pop("selected_ticket_id", None)
        context.user_data.pop("awaiting_admin_response", None)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏. üéõÔ∏è")

async def close_user_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_USER_ID:
        if "selected_ticket_id" in context.user_data:
            ticket_id = context.user_data["selected_ticket_id"]
            close_ticket(ticket_id)
            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            cursor.execute('SELECT user_id, username FROM tickets WHERE id = ?', (ticket_id,))
            ticket = cursor.fetchone()
            conn.close()
            if ticket:
                user_id_to_reply = ticket[0]
                try:
                    await context.bot.send_message(chat_id=user_id_to_reply, text=f"–¢–≤–æ–π —Ç–∏–∫–µ—Ç (ID {ticket_id}) –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. üö™", reply_markup=ReplyKeyboardMarkup([["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç üì©"]], resize_keyboard=True))
                except Exception as e:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await update.message.reply_text("–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç. üö™", reply_markup=get_admin_keyboard())
            context.user_data.pop("selected_ticket_id", None)
            context.user_data.pop("awaiting_admin_response", None)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è. ‚ùå")
    else:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM tickets WHERE user_id = ? AND status = "open"', (user_id,))
        active_ticket = cursor.fetchone()
        conn.close()
        if active_ticket:
            ticket_id = active_ticket[0]
            close_ticket(ticket_id)
            await update.message.reply_text("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. ‚úÖ", reply_markup=ReplyKeyboardMarkup([["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç üì©"]], resize_keyboard=True))
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"–¢–∏–∫–µ—Ç (ID {ticket_id}) –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∫–ª–∏–µ–Ω—Ç–æ–º.", reply_markup=get_admin_keyboard())
        else:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤. ‚ùå", reply_markup=ReplyKeyboardMarkup([["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç üì©"]], resize_keyboard=True))

async def reply_to_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. ‚ùå")
        return
    ticket_id = int(re.search(r"\((\d+)\)", update.message.text).group(1))
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT username, status FROM tickets WHERE id = ?', (ticket_id,))
    ticket = cursor.fetchone()
    conn.close()
    if ticket:
        username, status = ticket
        if status == "closed":
            await update.message.reply_text("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. ‚ùå")
            return
        messages = get_ticket_messages(ticket_id)
        response = f"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ —Ç–∏–∫–µ—Ç—É {ticket_id} —Å @{username}:\n\n"
        for msg in messages:
            sender = "–ê–¥–º–∏–Ω" if msg[0] == ADMIN_USER_ID else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            response += f"{sender}: {msg[1]}\n"
        await update.message.reply_text(response, reply_markup=ReplyKeyboardMarkup([["–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç ‚ùå", "–ù–∞–∑–∞–¥ üîô"]], resize_keyboard=True))
        context.user_data["selected_ticket_id"] = ticket_id
        context.user_data["awaiting_admin_response"] = True
    else:
        await update.message.reply_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")

async def show_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. ‚ùå")
        return
    tickets = get_active_tickets()
    if tickets:
        response = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã: üìã\n\n"
        for ticket in tickets:
            updated_status = " (–û–±–Ω–æ–≤–ª–µ–Ω–æ) üîÑ" if ticket[4] else ""
            response += f"ID: {ticket[0]}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket[2]} (ID: {ticket[1]})\n–ó–∞–ø—Ä–æ—Å: {ticket[3]}{updated_status}\n\n"
        response += "–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞: üì©"
        buttons = [[f"–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç ({ticket[0]}) üì©"] for ticket in tickets]
        buttons.append(["–ù–∞–∑–∞–¥ üîô"])
        await update.message.reply_text(response, reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    else:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç. ‚ùå")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex(r"^–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç\s*üì©$"), create_ticket))
    application.add_handler(MessageHandler(filters.Regex(r"^–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç\s*üö™$"), close_user_ticket))
    application.add_handler(MessageHandler(filters.Regex(r"^–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã\s*üìã"), show_tickets))
    application.add_handler(MessageHandler(filters.Regex(r"^–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç \(\d+\)\s*üì©$"), reply_to_ticket))
    application.add_handler(MessageHandler(filters.Regex(r"^–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç\s*‚ùå$"), close_user_ticket))
    application.add_handler(MessageHandler(filters.Regex(r"^–ù–∞–∑–∞–¥\s*üîô$"), handle_text_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.run_polling()

if __name__ == '__main__':
    main()

``` –¢—ã –±–µ–≥–∞–µ—à—å –∑–∞ –¥–µ–≤–æ—á–∫–æ–π, —Å –∫–æ—Ç–æ—Ä–æ–π —è –±—ã–ª –≤–º–µ—Å—Ç–µ
–¢—ã —Å–ª—É—à–∞–µ—à—å —Å –¥—Ä—É–∑—å—è–º–∏ –º–æ–∏ –ø–µ—Å–Ω–∏
–ò –µ—Å–ª–∏ —è –±—ã–ª –±—ã –µ—â—ë —á—É—Ç–æ—á–∫—É –∏–∑–≤–µ—Å—Ç–Ω–µ–µ
–í–µ—Å—å –º–∏—Ä –ø–µ—Ä–µ–≤–µ—Ä–Ω—É–ª, –ø—Ä–∏—Å—Ç–∞–≤–∏–≤ –∫ –≥–æ—Ä–ª—É –ª–µ–∑–≤–∏–µ
–õ–µ—Å–±–∏ ‚Äî —Ç–≤–æ–π –≤—ã—Ö–æ–¥, –≤–µ–¥—å —Ç—ã –Ω–µ –Ω–∞–π–¥—ë—à—å —Ç—É—Ç –Ω–∏–∫–æ–≥–æ –ø–æ—Ö—É–∂–µ
```

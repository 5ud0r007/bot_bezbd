from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
import re
from config import BOT_TOKEN, ADMIN_USER_ID, DB_NAME  # 1000-7: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.

# 1000-7: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º.
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tickets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            message TEXT NOT NULL,
            status TEXT DEFAULT 'open',
            updated BOOLEAN DEFAULT FALSE
        )
    ''')
    cursor.execute("PRAGMA table_info(tickets)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'updated' not in columns:
        cursor.execute('''
            ALTER TABLE tickets ADD COLUMN updated BOOLEAN DEFAULT FALSE
        ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ticket_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ticket_id INTEGER NOT NULL,
            sender_id INTEGER NOT NULL,
            message TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (ticket_id) REFERENCES tickets (id)
        )
    ''')
    conn.commit()
    conn.close()

# 1000-7: –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç, –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.
def add_ticket(user_id: int, username: str, message: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO tickets (user_id, username, message) VALUES (?, ?, ?)
    ''', (user_id, username, message))
    ticket_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return ticket_id

# 1000-7: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω, —Ç–∏–∫–µ—Ç –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π.
def add_ticket_message(ticket_id: int, sender_id: int, message: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO ticket_messages (ticket_id, sender_id, message) VALUES (?, ?, ?)
    ''', (ticket_id, sender_id, message))
    if sender_id != ADMIN_USER_ID:
        cursor.execute('''
            UPDATE tickets SET updated = TRUE WHERE id = ?
        ''', (ticket_id,))
    conn.commit()
    conn.close()

# 1000-7: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã. –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è.
def get_active_tickets():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, user_id, username, message, updated FROM tickets WHERE status = 'open'
    ''')
    tickets = cursor.fetchall()
    conn.close()
    return tickets

# 1000-7: –°—á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã. –ï—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –Ω—É–ª—è, –∞–¥–º–∏–Ω —É–≤–∏–¥–∏—Ç (+N).
def get_updated_tickets_count():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT COUNT(*) FROM tickets WHERE status = 'open' AND updated = TRUE
    ''')
    count = cursor.fetchone()[0]
    conn.close()
    return count

# 1000-7: –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ —Ç–∏–∫–µ—Ç—É. –ï—Å–ª–∏ —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç, –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
def get_ticket_messages(ticket_id: int):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT sender_id, message, timestamp FROM ticket_messages WHERE ticket_id = ? ORDER BY timestamp
    ''', (ticket_id,))
    messages = cursor.fetchall()
    conn.close()
    return messages

# 1000-7: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –µ–≥–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å.
def close_ticket(ticket_id: int):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE tickets SET status = 'closed' WHERE id = ?
    ''', (ticket_id,))
    conn.commit()
    conn.close()

init_db()

user_keyboard = ReplyKeyboardMarkup([["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç üì©"]], resize_keyboard=True)

# 1000-7: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.
def get_admin_keyboard():
    updated_count = get_updated_tickets_count()
    if updated_count > 0:
        return ReplyKeyboardMarkup([["–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã üìã (+{})".format(updated_count)]], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([["–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã üìã"]], resize_keyboard=True)

# 1000-7: –°—Ç–∞—Ä—Ç. –ï—Å–ª–∏ —Ç—ã –∞–¥–º–∏–Ω, —Ç–µ–±–µ –ø–æ–∫–∞–∂—É—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏.
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_USER_ID:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëã –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏. üõ†Ô∏è",
            reply_markup=get_admin_keyboard()
        )
    else:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''SELECT id FROM tickets WHERE user_id = ? AND status = 'open' ''', (user_id,))
        active_ticket = cursor.fetchone()
        conn.close()

        if active_ticket:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! üëã –£ —Ç–µ–±—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç. –ó–∞–∫—Ä–æ–π –µ–≥–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. üìù",
                reply_markup=ReplyKeyboardMarkup([["–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç üö™"]], resize_keyboard=True)
            )
        else:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! üëã –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç. üì©",
                reply_markup=user_keyboard
            )

# 1000-7: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞. –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç, –Ω–æ–≤—ã–π —Å–æ–∑–¥–∞—Ç—å –Ω–µ–ª—å–∑—è.
async def create_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_USER_ID:
        await update.message.reply_text("–¢—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã üìã'.")
        return

    username = update.message.from_user.username or update.message.from_user.first_name

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''SELECT id FROM tickets WHERE user_id = ? AND status = 'open' ''', (user_id,))
    active_ticket = cursor.fetchone()
    conn.close()

    if active_ticket:
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç. –ó–∞–∫—Ä–æ–π –µ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π. üö™")
    else:
        await update.message.reply_text("–û–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å: üìù")
        context.user_data["awaiting_ticket_description"] = True

# 1000-7: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message.text

    if user_id != ADMIN_USER_ID:
        if context.user_data.get("awaiting_ticket_description"):
            username = update.message.from_user.username or update.message.from_user.first_name
            ticket_id = add_ticket(user_id, username, message)
            add_ticket_message(ticket_id, user_id, message)
            await update.message.reply_text("–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ‚è≥")
            context.user_data["awaiting_ticket_description"] = False

            await update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç. –ó–∞–∫—Ä–æ–π –µ–≥–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. üìù",
                reply_markup=ReplyKeyboardMarkup([["–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç üö™"]], resize_keyboard=True)
            )

            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç (ID {ticket_id}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}",
                reply_markup=ReplyKeyboardMarkup([["–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç ({}) üì©".format(ticket_id)]], resize_keyboard=True)
            )
        else:
            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            cursor.execute('''SELECT id FROM tickets WHERE user_id = ? AND status = 'open' ''', (user_id,))
            active_ticket = cursor.fetchone()
            conn.close()

            if active_ticket:
                ticket_id = active_ticket[0]
                add_ticket_message(ticket_id, user_id, message)
                await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∏–∫–µ—Ç. üìù")

                await context.bot.send_message(
                    chat_id=ADMIN_USER_ID,
                    text=f"–¢–∏–∫–µ—Ç (ID {ticket_id}) –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}.\n\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}",
                    reply_markup=ReplyKeyboardMarkup([["–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç ({}) üì©".format(ticket_id)]], resize_keyboard=True)
                )
            else:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏. üéõÔ∏è")
        return

    if re.match(r"^–ù–∞–∑–∞–¥\s*üîô$", message):
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†",
            reply_markup=get_admin_keyboard()
        )
        context.user_data.pop("selected_ticket_id", None)
        context.user_data.pop("awaiting_admin_response", None)
        return

    if re.match(r"^–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã\s*üìã", message):
        await show_tickets(update, context)
        return

    if context.user_data.get("awaiting_admin_response"):
        ticket_id = context.user_data["selected_ticket_id"]
        add_ticket_message(ticket_id, ADMIN_USER_ID, message)

        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''UPDATE tickets SET updated = FALSE WHERE id = ?''', (ticket_id,))
        conn.commit()
        conn.close()

        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''SELECT user_id, username FROM tickets WHERE id = ?''', (ticket_id,))
        ticket = cursor.fetchone()
        conn.close()

        if ticket:
            user_id_to_reply = ticket[0]
            username = ticket[1]
            try:
                await context.bot.send_message(
                    chat_id=user_id_to_reply,
                    text=f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–≤–æ–π —Ç–∏–∫–µ—Ç (ID {ticket_id}):\n\n{message}"
                )
                await update.message.reply_text(
                    f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}. ‚úÖ",
                    reply_markup=ReplyKeyboardMarkup([["–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç ‚ùå", "–ù–∞–∑–∞–¥ üîô"]], resize_keyboard=True)
                )
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            await update.message.reply_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")

        context.user_data.pop("selected_ticket_id", None)
        context.user_data.pop("awaiting_admin_response", None)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏. üéõÔ∏è")

# 1000-7: –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å.
async def close_user_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_USER_ID:
        await update.message.reply_text("–¢—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã üìã'.")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''SELECT id FROM tickets WHERE user_id = ? AND status = 'open' ''', (user_id,))
    active_ticket = cursor.fetchone()
    conn.close()

    if active_ticket:
        close_ticket(active_ticket[0])
        await update.message.reply_text("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. ‚úÖ")
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π. üì©",
            reply_markup=user_keyboard
        )
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤. ‚ùå")

# 1000-7: –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç. –ï—Å–ª–∏ —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è.
async def reply_to_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. ‚ùå")
        return

    ticket_id = int(re.search(r"\((\d+)\)", update.message.text).group(1))  # 1000-7: –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞.

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''SELECT username, status FROM tickets WHERE id = ?''', (ticket_id,))
    ticket = cursor.fetchone()
    conn.close()

    if ticket:
        username, status = ticket
        if status == "closed":
            await update.message.reply_text("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. ‚ùå")
            return

        messages = get_ticket_messages(ticket_id)
        response = f"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ —Ç–∏–∫–µ—Ç—É {ticket_id} —Å @{username}:\n\n"
        for msg in messages:
            sender = "–ê–¥–º–∏–Ω" if msg[0] == ADMIN_USER_ID else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            response += f"{sender}: {msg[1]}\n"
        await update.message.reply_text(
            response,
            reply_markup=ReplyKeyboardMarkup([["–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç ‚ùå", "–ù–∞–∑–∞–¥ üîô"]], resize_keyboard=True)
        )
        context.user_data["selected_ticket_id"] = ticket_id
        context.user_data["awaiting_admin_response"] = True
    else:
        await update.message.reply_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")

# 1000-7: –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤. –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.
async def show_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. ‚ùå")
        return

    tickets = get_active_tickets()
    if tickets:
        response = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã: üìã\n\n"
        for ticket in tickets:
            updated_status = " (–û–±–Ω–æ–≤–ª–µ–Ω–æ) üîÑ" if ticket[4] else ""
            response += f"ID: {ticket[0]}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket[2]} (ID: {ticket[1]})\n–ó–∞–ø—Ä–æ—Å: {ticket[3]}{updated_status}\n\n"
        response += "–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞: üì©"

        buttons = [[f"–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç ({ticket[0]}) üì©"] for ticket in tickets]
        buttons.append(["–ù–∞–∑–∞–¥ üîô"])

        await update.message.reply_text(
            response,
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )
    else:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç. ‚ùå")

# 1000-7: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ù–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω.
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex(r"^–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç\s*üì©$"), create_ticket))
    application.add_handler(MessageHandler(filters.Regex(r"^–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç\s*üö™$"), close_user_ticket))
    application.add_handler(MessageHandler(filters.Regex(r"^–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã\s*üìã"), show_tickets))
    application.add_handler(MessageHandler(filters.Regex(r"^–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç \(\d+\)\s*üì©$"), reply_to_ticket))
    application.add_handler(MessageHandler(filters.Regex(r"^–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç\s*‚ùå$"), close_user_ticket))
    application.add_handler(MessageHandler(filters.Regex(r"^–ù–∞–∑–∞–¥\s*üîô$"), handle_text_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.run_polling()

if __name__ == '__main__':
    main()